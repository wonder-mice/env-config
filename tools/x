#!/bin/bash

# @env-config-doc * tool: x - numerate command output for later reference
# Tool can operate in two modes:
# - Take coomand output and print it numerating each line
# - Print N-th line from previously numerated output
# That can be down in different ways:
#	$ x command args
#		+ Command specific processing possible
#		+ Colors support possible
#		- Aliases not supported
#		- Bash complition not supported
#	$ command args | x
#		+ Alias support
#		+ Bash complition support
#		- Command specific processing impossible
#		- Colors support not possible
# For now we will take second approach and see.

function usage {
	echo "Usage:"
	echo "    x    - print numerated lines of input and remember them"
	echo "    x N  - print N-th line from previously numerated output"
	echo "    x -  - open previous output in default text editor"
	echo ""
	echo "Example:"
	echo "\$ find . -name \"*.c\" | x"
	echo "   1 | ./src/main.c"
	echo "   2 | ./src/opts.c"
	echo "   3 | ./src/sock.c"
	echo "   4 | ./src/help.c"
	echo "\$ vim \$(x 3)"
	echo "# editing ./src/sock.c in vim"
	exit 1
}

eval xfile="~/.tool-x"

# numerate and save input if no arguments
if [[ 0 == $# ]]; then
	echo "# Created by x tool (https://github.com/wonder-mice/env-config)" > "${xfile}"
	tee -a "${xfile}" | nl -p -b a -v 1 -w 4 -s " | "
	exit 0
fi

# open previous output in text editor
if [[ '-' == ${1} ]]; then
	"${EDITOR:-ed}" "${xfile}"
	exit $?
fi

# print n-th line from saved output
n="${1}"
number='^[0-9]+$'
if [[ ! ${n} =~ ${number} ]]; then
	usage
	exit 1
fi
if [[ 0 == ${n} ]]; then
	usage
	exit 1
fi
n=$(( n + 1 ))
sed -n "${n}p" "${xfile}"
exit $?

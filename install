#!/bin/bash

# detect platform (darwin, linux)
ec_platform='unknown'
if [[ ${OSTYPE} == darwin* ]]; then
	ec_platform='darwin'
elif [[ ${OSTYPE} == linux* ]]; then
	ec_platform='linux'
else
	echo "Error: unknown OS type \"${OSTYPE}\""
	exit 1
fi

# load existing settings (usually ~/.env-config/settings)
eval ec_dir="${ENV_CONFIG_DIR}"
if [[ -n ${ec_dir} && -f "${ec_dir}/settings" ]]; then
	source "${ec_dir}/settings"
fi
ENV_CONFIG_PLATFORM="${ec_platform}"
# use defaults if something was not set
: ${ENV_CONFIG_DIR:='~/.env-config'}
: ${ENV_CONFIG_COLORS:='yes'}
: ${ENV_CONFIG_BASH_PROMPT_GIT_BRANCH:='yes'}
: ${ENV_CONFIG_BASH_PROMPT_MARKS:='yes'}

# for specifed feature name set corresponding setting to specified value
function ec_set_feature_var {
	local feature="${1}"
	local value="${2}"
	case "${feature}" in
		colors) ENV_CONFIG_COLORS="${value}";;
		bash-prompt-git-branch) ENV_CONFIG_BASH_PROMPT_GIT_BRANCH="${value}";;
		bash-prompt-marks) ENV_CONFIG_BASH_PROMPT_MARKS="${value}";;
		*) echo "Error: unknown feature \"${feature}\""; exit 1;;
	esac
}

# process command line arguments
ec_src=$(dirname "${BASH_SOURCE[0]}")
ec_verbose='no'
ec_dryrun='no'
while getopts ":hvty:n:d:" OPT; do
	case "${OPT}" in
		h)
			echo "Options are:"
			echo "    -h           - show this help"
			echo "    -v           - verbose output"
			echo "    -t           - dry run"
			echo "    -y <feature> - enable feature"
			echo "    -n <feature> - disable feature"
			echo "    -d <dir>     - install to dir (default is \"${ENV_CONFIG_DIR}\")"
			echo ""
			echo "Features:"
			echo "    colors                 - more colors"
			echo "    readline               - readline config file"
			echo "    bash-prompt-git-branch - git branch name in bash command prompt"
			echo "    bash-prompt-marks      - text notes in bash command prompt"
			exit 1
			;;
		v)
			ec_verbose='yes'
			;;
		t)
			ec_dryrun='yes'
			;;
		y)
			ec_set_feature_var "${OPTARG}" 'yes'
			;;
		n)
			ec_set_feature_var "${OPTARG}" 'no'
			;;
		d)
			ENV_CONFIG_DIR="${OPTARG}"
			;;
		\?)
			echo "Error: invalid option -${OPTARG}"
			exit 1
			;;
		:)
			echo "Error: option -${OPTARG} requires an argument"
			exit 1
			;;
	esac
done

# check install dir path (must not have spaces or complex substitutions)
eval ec_dir="${ENV_CONFIG_DIR}"
ec_dir_check=$(printf '%q' "${ENV_CONFIG_DIR}")
if [[ ${ec_dir_check} != ${ENV_CONFIG_DIR} ]]; then
	echo "Error: install dir \"${ENV_CONFIG_DIR}\" must not contain spaces, variables or other expandable tokens (except ~)"
	exit 1
fi
ec_dir_check="${ec_dir_check/#~/${HOME}}"
if [[ ${ec_dir_check} != ${ec_dir} ]]; then
	echo "Error: install dir \"${ENV_CONFIG_DIR}\" requires complex substitution that is not supported"
	exit 1
fi
if [[ ${ec_dir} != /* ]]; then
	echo "Error: install dir \"${ENV_CONFIG_DIR}\" doesn't evaluate to absolute path (\"${ec_dir}\")"
	exit 1
fi

# print settings 
if [[ ${ec_verbose} == 'yes' ]]; then
	echo "Source dir:                  \"${ec_src}\""
	echo "Install dir:                 \"${ENV_CONFIG_DIR}\" (\"${ec_dir}\")"
	echo "Platform:                    \"${ENV_CONFIG_PLATFORM}\""
	echo "Colors:                      \"${ENV_CONFIG_COLORS}\""
	echo "Bash prompt with git branch: \"${ENV_CONFIG_BASH_PROMPT_GIT_BRANCH}\""
	echo "Bash prompt with text marks: \"${ENV_CONFIG_BASH_PROMPT_MARKS}\""
	echo "Dryrun:                      \"${ec_dryrun}\""
fi

# append one file to another performing some substitutions in the first one
function ec_append_init_script {
	local init_script="${1}"
	local dst_file="${2}"
	if ! grep -Fq 'env-config+magic' "${dst_file}" &> /dev/null; then
		# 'env-config+magic' was not found in ${dst_file}
		# It is OK to append init script.
		if [[ -s ${dst_file} ]]; then
			# If ${dst_file} not empty, append extra empty line for nice style
			echo >> "${dst_file}" || exit 1
		fi
		sed \
			-e "s;<\[ENV_CONFIG_DIR\]>;${ENV_CONFIG_DIR};g" \
			"${init_script}" >> "${dst_file}" || exit 1
	fi
}

# extract annotated documentation
function ec_get_docs {
	local afile="${1}"
	local doc='^.*@env-config-doc'
	sed -n "/${doc}[ \t]*/s/${doc}//p" "${afile}" || exit 1
}

# install / update
if [[ ${ec_dryrun} == 'no' ]]; then
	mkdir -p "${ec_dir}" || exit 1

	# settings file
	ec_settings_file="${ec_dir}/settings"
	rm -f "${ec_settings_file}"
	echo "ENV_CONFIG_PLATFORM='${ENV_CONFIG_PLATFORM}'" >> ${ec_settings_file} || exit 1
	echo "ENV_CONFIG_COLORS='${ENV_CONFIG_COLORS}'" >> ${ec_settings_file} || exit 1
	echo "ENV_CONFIG_BASH_PROMPT_GIT_BRANCH='${ENV_CONFIG_BASH_PROMPT_GIT_BRANCH}'" >> ${ec_settings_file} || exit 1
	echo "ENV_CONFIG_BASH_PROMPT_MARKS='${ENV_CONFIG_BASH_PROMPT_MARKS}'" >> ${ec_settings_file} || exit 1

	# readline
	mkdir -p "${ec_dir}/readline" || exit 1
	ec_get_docs "${ec_src}/readline/inputrc"
	cp "${ec_src}/readline/inputrc" "${ec_dir}/readline/inputrc" || exit 1
	ec_append_init_script "${ec_src}/readline/inputrc-init" ~/.inputrc

	# bash - copy
	mkdir -p "${ec_dir}/bash" || exit 1
	ec_get_docs "${ec_src}/bash/bashrc"
	cp "${ec_src}/bash/bashrc" "${ec_dir}/bash/bashrc" || exit 1
	# https://raw.github.com/git/git/master/contrib/completion/git-completion.bash
	cp "${ec_src}/bash/git-completion.bash" "${ec_dir}/bash/git-completion.bash" || exit 1
	# https://svn.apache.org/repos/asf/subversion/trunk/tools/client-side/bash_completion
	cp "${ec_src}/bash/svn-completion.bash" "${ec_dir}/bash/svn-completion.bash" || exit 1

	# bash - source
	case ${ENV_CONFIG_PLATFORM} in
		'darwin') ec_bashrc_file=~/.bash_profile;;
		'linux') ec_bashrc_file=~/.bashrc;;
		*) echo "Error: unknown platform \"${ENV_CONFIG_PLATFORM}\""; exit 1;;
	esac
	ec_append_init_script "${ec_src}/bash/bashrc-init" "${ec_bashrc_file}"

	# fish - copy
	mkdir -p "${ec_dir}/fish" || exit 1
	ec_get_docs "${ec_src}/fish/config.fish"
	cp "${ec_src}/fish/config.fish" "${ec_dir}/fish/config.fish" || exit 1

	# fish - source
	mkdir -p ~/.config/fish || exit 1
	ec_append_init_script "${ec_src}/fish/config.fish-init" ~/.config/fish/config.fish

	# vim - copy
	mkdir -p "${ec_dir}/vim" || exit 1
	ec_get_docs "${ec_src}/vim/vimrc"
	cp "${ec_src}/vim/vimrc" "${ec_dir}/vim/vimrc" || exit 1
	mkdir -p "${ec_dir}/vim/plugin" || exit 1
	# https://raw.github.com/ciaranm/securemodelines/master/plugin/securemodelines.vim
	cp "${ec_src}/vim/plugin/securemodelines.vim" "${ec_dir}/vim/plugin/securemodelines.vim" || exit 1
	# https://raw.github.com/xianxu/vim-settings/master/.vim/plugin/file_line.vim
	cp "${ec_src}/vim/plugin/file_line.vim" "${ec_dir}/vim/plugin/file_line.vim" || exit 1
	# https://raw.github.com/vim-scripts/a.vim/master/plugin/a.vim
	cp "${ec_src}/vim/plugin/a.vim" "${ec_dir}/vim/plugin/a.vim" || exit 1

	# vim - setup
	"${ec_src}/vim/vimrc-setup" || exit 1

	# vim - source
	ec_append_init_script "${ec_src}/vim/vimrc-init" ~/.vimrc

	# git
	mkdir -p "${ec_dir}/git" || exit 1
	ec_get_docs "${ec_src}/git/gitconfig"
	cp "${ec_src}/git/gitconfig" "${ec_dir}/git/gitconfig" || exit 1
	ec_append_init_script "${ec_src}/git/gitconfig-init" ~/.gitconfig

	# tools
	mkdir -p "${ec_dir}/bin" || exit 1
	ec_get_docs "${ec_src}/tools/x"
	cp "${ec_src}/tools/x" "${ec_dir}/bin/x" || exit 1
	ec_get_docs "${ec_src}/tools/getpassword"
	cp "${ec_src}/tools/getpassword" "${ec_dir}/bin/getpassword" || exit 1
fi

echo "Done!"
